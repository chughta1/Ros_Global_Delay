// Generated by gencpp from file geomtwo/Transform.msg
// DO NOT EDIT!


#ifndef GEOMTWO_MESSAGE_TRANSFORM_H
#define GEOMTWO_MESSAGE_TRANSFORM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geomtwo/Vector.h>
#include <geomtwo/Versor.h>

namespace geomtwo
{
template <class ContainerAllocator>
struct Transform_
{
  typedef Transform_<ContainerAllocator> Type;

  Transform_()
    : translation()
    , rotation()  {
    }
  Transform_(const ContainerAllocator& _alloc)
    : translation(_alloc)
    , rotation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geomtwo::Vector_<ContainerAllocator>  _translation_type;
  _translation_type translation;

   typedef  ::geomtwo::Versor_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;




  typedef boost::shared_ptr< ::geomtwo::Transform_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::geomtwo::Transform_<ContainerAllocator> const> ConstPtr;

}; // struct Transform_

typedef ::geomtwo::Transform_<std::allocator<void> > Transform;

typedef boost::shared_ptr< ::geomtwo::Transform > TransformPtr;
typedef boost::shared_ptr< ::geomtwo::Transform const> TransformConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::geomtwo::Transform_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::geomtwo::Transform_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace geomtwo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geomtwo': ['/home/chuggi/catkin_ws/src/geomtwo/msg', '/home/chuggi/catkin_ws/src/geomtwo/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::geomtwo::Transform_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::geomtwo::Transform_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geomtwo::Transform_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geomtwo::Transform_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geomtwo::Transform_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geomtwo::Transform_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::geomtwo::Transform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "932b254785c4937fbabf36a74854ba5d";
  }

  static const char* value(const ::geomtwo::Transform_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x932b254785c4937fULL;
  static const uint64_t static_value2 = 0xbabf36a74854ba5dULL;
};

template<class ContainerAllocator>
struct DataType< ::geomtwo::Transform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geomtwo/Transform";
  }

  static const char* value(const ::geomtwo::Transform_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::geomtwo::Transform_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vector translation\n\
Versor rotation\n\
\n\
================================================================================\n\
MSG: geomtwo/Vector\n\
float64 x\n\
float64 y\n\
\n\
================================================================================\n\
MSG: geomtwo/Versor\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const ::geomtwo::Transform_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::geomtwo::Transform_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translation);
      stream.next(m.rotation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Transform_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::geomtwo::Transform_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::geomtwo::Transform_<ContainerAllocator>& v)
  {
    s << indent << "translation: ";
    s << std::endl;
    Printer< ::geomtwo::Vector_<ContainerAllocator> >::stream(s, indent + "  ", v.translation);
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::geomtwo::Versor_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEOMTWO_MESSAGE_TRANSFORM_H
